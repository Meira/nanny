4. Troubleshooting:

We have some service which works long time (several months or even more). It seems nice
to have some watchdog application which would support the main service and help to work
it smoothly. Make sense? Let's think what kind of support it may provide. Restart of crashed,
frozen, broken apps? Picks up error/warning messages from its logs? Monitoring of some
system metrics like CPU, memory consumption? Cores? Anything more? Just construct your
own fake system with minimal functionality and its satellite watchdog shadow.

Пожалуйста, укажите правильный путь к интерпретатору Python в файле nanny.py (у меня это C:/Python27/python),
либо выполняйте "python nanny.py" вместо "nanny.py".
Проверяла на Windows 7 и Ubuntu с Python 2.7.
Чтобы завершить работу приложения на Linux можно нажать Ctrl+Z. Стандартный терминал Windows так не умеет, так что его нужно закрыть (я пользовалась терминалом ConEmu).

Я выбрала 4 задание.
Моя мини-система состоит из двух приложений, основного (app.py, данные к нему - appdata.txt),
и контролирующего приложения (nanny.py - основной запускаемый файл). Все файлы я сложила в одну папку для
удобства демо-запуска.
Выполните nanny.py без аргументов, чтобы посмотреть справку.

Nanny - консольное приложение, которое запускает любой python-скрипт (нужно указать путь к нему, относительный или абсолютный) и присматривает за ним. Для этого у него есть "нянечки" - классы, образованные от класса Nanny (файл nannies/generic.py). Нянечки самостоятельны,
каждой из них нужно только имя подопечной задачи, чтобы начать присматривать. При запуске нянечки делятся
друг с другом уникальным идентификатором задачи, по которому можно собрать информацию из записей всех нянечек.

Система предусматривает расширяемость путем добавления классов в модуль nannies для сбора полезной
информации.

В моей системе есть только одна нянечка - HealthNanny (nannies/health.py), которая перезапускает задачу,
если та завершилась, и записывает всю информацию о перезапусках. Статистику по любой ранее запущенной
задаче можно получить в json или в человекочитаемом виде. Для этого сначала запустите задачу (nanny.py
app.py), а потом посмотрите ее статистику (nanny.py --stat app).

Каждая нянечка умеет отгружать только свою статистику. Собрав со всех json, можно выбрать только нужную
информацию и строить графики, отмечать проблемы приложения и делать предположения
о их причинах. Например, имея дополнительно нянечку, которая будет записывать интернет-трафик, можно
распознать приложение, падающее при попытке переслать слишком большой объем данных. Или приложение,
падающее каждую пятницу. Или приложение, записывающее в лог ошибки при скачках потребления оперативной памяти.

Пока единственный вывод, который я смогла сделать - подопечное приложение app.py неплохо угадывает емейлы на
яндексе и почти не падает :)

P.S. Раскомментируйте в app.py строку 69, замените your_email@yandex.ru на ваш емейл, выполните
nanny.py app.py и ждите писем (проверьте спам) :)